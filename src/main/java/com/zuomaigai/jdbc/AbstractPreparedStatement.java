package com.zuomaigai.jdbc;

import java.io.Reader;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractPreparedStatement extends AbstractStatement implements PreparedStatement {

    protected final String sql;
    protected int autoGeneratedKeys = -1;
    protected int[] columnIndexes;
    protected String[] columnNames;

    protected List<Object> parameters = new ArrayList<>();
    protected List<List<Object>> batchParameters;
    protected PreparedStatement innerStatement;

    protected AbstractPreparedStatement(String sql) {
        this.sql = sql;
    }

    protected PreparedStatement createInternalPst(String finalSql) throws SQLException {
        PreparedStatement pstmt;
        if (autoGeneratedKeys != -1) {
            pstmt = connection.getInnerConnection().prepareStatement(finalSql, autoGeneratedKeys);
        } else if (columnIndexes != null) {
            pstmt = connection.getInnerConnection().prepareStatement(finalSql, columnIndexes);
        } else if (columnNames != null) {
            pstmt = connection.getInnerConnection().prepareStatement(finalSql, columnNames);
        } else {
            if (this.resultSetHoldability == -1) {
                pstmt = connection.getInnerConnection().prepareStatement(finalSql, this.resultSetType, this.resultSetConcurrency);
            } else {
                pstmt = connection.getInnerConnection().prepareStatement(finalSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability);
            }
        }

        pstmt.setQueryTimeout(queryTimeout);
        pstmt.setFetchSize(fetchSize);
        pstmt.setFetchDirection(fetchDirection);
        pstmt.setMaxRows(maxRows);
        return pstmt;
    }

    protected void setParameter(final int parameterIndex, final Object value) {
        if (parameters.size() == parameterIndex - 1) {
            parameters.add(value);
            return;
        }
        for (int i = parameters.size(); i <= parameterIndex - 1; i++) {
            parameters.add(null);
        }
        parameters.set(parameterIndex - 1, value);
    }

    /**
     * 进一步加工参数后（比如加密处理），并创建真实 preparedStatement后，填充参数
     * @param parameters
     * @throws SQLException
     */
    protected void replayParameters(List<Object> parameters) throws SQLException {
        for (int i = 1; i <= parameters.size(); i++) {
            this.innerStatement.setObject(i, parameters.get(i-1));
        }
    }

    public void setAutoGeneratedKeys(int autoGeneratedKeys) {
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    public void setResultSetType(int resultSetType) {
        this.resultSetType = resultSetType;
    }

    public void setResultSetConcurrency(int resultSetConcurrency) {
        this.resultSetConcurrency = resultSetConcurrency;
    }

    public void setResultSetHoldability(int resultSetHoldability) {
        this.resultSetHoldability = resultSetHoldability;
    }

    public void setColumnIndexes(int[] columnIndexes) {
        this.columnIndexes = columnIndexes;
    }

    public void setColumnNames(String[] columnNames) {
        this.columnNames = columnNames;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, columnIndexes) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, autoGeneratedKeys) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, columnNames) not support in preparedStatement");
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeQuery(sql) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, autoGeneratedKeys) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, columnIndexes) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, columnNames) not support in preparedStatement");
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("addBatch(String sql) not support in preparedStatement");
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException {
        throw new SQLFeatureNotSupportedException("setRef(int parameterIndex, Ref x) not support");
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNCharacterStream(int parameterIndex, Reader value) not support");
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNClob(int parameterIndex, Reader reader) not support");
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNClob(int parameterIndex, Reader reader, long length) not support");
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        throw new SQLFeatureNotSupportedException("setArray(int parameterIndex, Array x) not support");
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException {
        throw new SQLFeatureNotSupportedException("setRowId(int parameterIndex, RowId x)  not support");
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNCharacterStream(int parameterIndex, Reader value, long length)  not support");
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException {
        throw new SQLFeatureNotSupportedException("setNClob(int parameterIndex, NClob value) not support");
    }
}
