package com.zuomaigai.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.spi.CalendarNameProvider;

public abstract class AbstractPreparedStatement extends AbstractStatement implements PreparedStatement {

    protected final String sql;
    protected int autoGeneratedKeys = -1;
    protected int[] columnIndexes;
    protected String[] columnNames;

    protected List<ParameterReplayFunc<PreparedStatement>> parameterReplayers = new ArrayList<>();
    protected List<List<ParameterReplayFunc<PreparedStatement>>> batchParameterReplayers = new ArrayList<>();
    protected PreparedStatement innerPreparedStatement;

    protected AbstractPreparedStatement(String sql) {
        this.sql = sql;
    }

    protected PreparedStatement createInternalPreparedStatement(Connection realConnection, String finalSql) throws SQLException {
        PreparedStatement pstmt;
        if (autoGeneratedKeys != -1) {
            pstmt = realConnection.prepareStatement(finalSql, autoGeneratedKeys);
        } else if (columnIndexes != null) {
            pstmt = realConnection.prepareStatement(finalSql, columnIndexes);
        } else if (columnNames != null) {
            pstmt = realConnection.prepareStatement(finalSql, columnNames);
        } else {
            if (this.resultSetHoldability == -1) {
                pstmt = realConnection.prepareStatement(finalSql, this.resultSetType, this.resultSetConcurrency);
            } else {
                pstmt = realConnection.prepareStatement(finalSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability);
            }
        }

        pstmt.setQueryTimeout(queryTimeout);
        pstmt.setFetchSize(fetchSize);
        pstmt.setFetchDirection(fetchDirection);
        pstmt.setMaxRows(maxRows);

        this.innerPreparedStatement = pstmt;

        return pstmt;
    }

    protected void replayParameters() throws SQLException {
        for (ParameterReplayFunc<PreparedStatement> replayer : parameterReplayers) {
            replayer.replay(this.innerPreparedStatement);
        }
    }

    @Override
    public Statement getInnerStatement() {
        return this.innerPreparedStatement;
    }

    public void setAutoGeneratedKeys(int autoGeneratedKeys) {
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    public void setColumnIndexes(int[] columnIndexes) {
        this.columnIndexes = columnIndexes;
    }

    public void setColumnNames(String[] columnNames) {
        this.columnNames = columnNames;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, columnIndexes) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, autoGeneratedKeys) not support in preparedStatement");
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("execute(sql, columnNames) not support in preparedStatement");
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeQuery(sql) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, autoGeneratedKeys) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, columnIndexes) not support in preparedStatement");
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeUpdate(sql, columnNames) not support in preparedStatement");
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("addBatch(String sql) not support in preparedStatement");
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNull(parameterIndex, sqlType));
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBoolean(parameterIndex, x));
    }

    @Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setByte(parameterIndex, x));
    }

    @Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setShort(parameterIndex, x));
    }

    @Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setInt(parameterIndex, x));
    }

    @Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setLong(parameterIndex, x));
    }

    @Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setFloat(parameterIndex, x));
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setDouble(parameterIndex, x));
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBigDecimal(parameterIndex, x));
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBigDecimal(parameterIndex, x));
    }

    @Override
    public void setString(int parameterIndex, String x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setString(parameterIndex, x));
    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBytes(parameterIndex, x));
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setDate(parameterIndex, x));
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setTime(parameterIndex, x));
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setTimestamp(parameterIndex, x));
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setAsciiStream(parameterIndex, x));
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setUnicodeStream(parameterIndex, x, length));
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBinaryStream(parameterIndex, x, length));
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setObject(parameterIndex, targetSqlType));
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setObject(parameterIndex, x));
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setCharacterStream(parameterIndex, reader, length));
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setRef(parameterIndex, x));
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBlob(parameterIndex, x));
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setClob(parameterIndex, x));
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNCharacterStream(parameterIndex, value));
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setClob(parameterIndex, reader));
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBlob(parameterIndex, inputStream));
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNClob(parameterIndex, reader));
    }

    @Override
    public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength));
    }

    @Override
    public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setObject(parameterIndex, x, targetSqlType));
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNClob(parameterIndex, reader, length));
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setSQLXML(parameterIndex, xmlObject));
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength));
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setAsciiStream(parameterIndex, x, length));
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBinaryStream(parameterIndex, x, length));
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setCharacterStream(parameterIndex, reader, length));
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setAsciiStream(parameterIndex, x));
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBinaryStream(parameterIndex, x));
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setCharacterStream(parameterIndex, reader));
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setArray(parameterIndex, x));
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        if (this.resultSet != null) {
            return this.resultSet.getMetaData();
        }
        return null;
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setDate(parameterIndex, x, cal));
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setTime(parameterIndex, x, cal));
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setTimestamp(parameterIndex, x, cal));
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNull(parameterIndex, sqlType, typeName));
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setURL(parameterIndex, x));
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return null;
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setRowId(parameterIndex, x));
    }

    @Override
    public void setNString(int parameterIndex, String value) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNString(parameterIndex, value));
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNCharacterStream(parameterIndex, value, length));
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setNClob(parameterIndex, value));
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setClob(parameterIndex, reader, length));
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
        this.parameterReplayers.add(preparedStatement -> preparedStatement.setBlob(parameterIndex, inputStream, length));
    }

    @Override
    public void clearParameters() throws SQLException {
        this.parameterReplayers.clear();
    }

    @Override
    public void addBatch() throws SQLException {
        this.batchParameterReplayers.add(new ArrayList<>(this.parameterReplayers));
        this.parameterReplayers.clear();
    }

    @Override
    public void clearBatch() throws SQLException {
        this.batchParameterReplayers.clear();
    }

    @Override
    public void close() throws SQLException {
        super.close();

        if (this.innerPreparedStatement != null) {
            try {
                this.innerPreparedStatement.close();
            } catch (SQLException e) {
                // ignore
            }
        }

        this.parameterReplayers.clear();
        this.batchParameterReplayers.clear();
        this.innerPreparedStatement = null;
    }
}
