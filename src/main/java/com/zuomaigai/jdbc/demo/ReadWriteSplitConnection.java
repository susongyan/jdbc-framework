package com.zuomaigai.jdbc.demo;

import com.zuomaigai.jdbc.AbstractConnection;

import java.sql.*;

public class ReadWriteSplitConnection extends AbstractConnection {

    private final ReadWriterSplitDataSource readWriterSplitDataSource;
    private Connection writeConnection;
    private Connection readConnection;

    public ReadWriteSplitConnection(ReadWriterSplitDataSource readWriterSplitDataSource) {
        this.readWriterSplitDataSource = readWriterSplitDataSource;
    }

    @Override
    public Connection getRealConnection(String sql, boolean explicitUpdate) throws SQLException {
        if (this.writeConnection != null) {
            return this.writeConnection;
        }
        if (!this.autoCommit) {
            this.writeConnection = readWriterSplitDataSource.getWriteDataSource().getConnection();
            return this.writeConnection;
        } else if (sql != null && !sql.trim().isEmpty()) {
            if (isSelect(sql)) {
                this.readConnection = readWriterSplitDataSource.chooseReadDataSource().getConnection();
                this.innerConnection = readConnection;
            } else {
                this.writeConnection = readWriterSplitDataSource.getWriteDataSource().getConnection();
                this.innerConnection = writeConnection;
            }
        }
        return this.innerConnection;
    }

    private boolean isSelect(String sql) {
        return sql.toLowerCase().trim().startsWith("select");
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new ReadWriteSplitStatement(this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new ReadWriteSplitStatement(this, resultSetType, resultSetConcurrency);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new ReadWriteSplitStatement(this, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new ReadWriteSplitPreparedStatement(this, sql, columnNames);
    }

    @Override
    public void commit() throws SQLException {
        if (!this.autoCommit) {
            throw new SQLException("not in transaction context, cannot commit");
        }
        if (this.writeConnection != null) {
            this.writeConnection.commit();
        }
    }

    @Override
    public void rollback() throws SQLException {
        if (this.writeConnection != null) {
            this.writeConnection.rollback();
        }
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        throw new SQLFeatureNotSupportedException("rollback with savepoint not supported");
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return getRealConnection(null, false).getMetaData();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return !this.closed;
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return getRealConnection(null, false).createArrayOf(typeName, elements);
    }
}
