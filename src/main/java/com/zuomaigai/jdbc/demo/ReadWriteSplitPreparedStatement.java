package com.zuomaigai.jdbc.demo;

import com.zuomaigai.jdbc.AbstractConnection;
import com.zuomaigai.jdbc.AbstractPreparedStatement;
import com.zuomaigai.jdbc.ParameterReplayFunc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class ReadWriteSplitPreparedStatement extends AbstractPreparedStatement {

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql) {
        super(sql);
        this.connection = connection;
    }

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql, int resultSetType, int resultSetConcurrency) {
        super(sql);
        this.connection = connection;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
    }

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        super(sql);
        this.connection = connection;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
    }

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql, int autoGeneratedKeys) {
        super(sql);
        this.connection = connection;
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql, int[] columnIndexes) {
        super(sql);
        this.connection = connection;
        this.columnIndexes = columnIndexes;
    }

    public ReadWriteSplitPreparedStatement(AbstractConnection connection, String sql, String[] columnNames) {
        super(sql);
        this.connection = connection;
        this.columnNames = columnNames;
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        // sql rewrite
        // db select
        // getConnection
        // create preparedStatement
        // replay parameters

        Connection realConnection = this.connection.getRealConnection(this.sql, false);
        createInternalPreparedStatement(realConnection, this.sql);
        replayParameters();
        this.resultSet = this.innerPreparedStatement.executeQuery();
        return this.resultSet;
    }

    @Override
    public int executeUpdate() throws SQLException {
        Connection realConnection = this.connection.getRealConnection(this.sql, true);
        createInternalPreparedStatement(realConnection, this.sql);
        replayParameters();
        return this.innerPreparedStatement.executeUpdate();
    }

    @Override
    public boolean execute() throws SQLException {
        Connection realConnection = this.connection.getRealConnection(this.sql, false);
        createInternalPreparedStatement(realConnection, this.sql);
        replayParameters();
        boolean result = this.innerPreparedStatement.execute();
        this.resultSet = this.innerPreparedStatement.getResultSet();
        return result;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        Connection realConnection = this.connection.getRealConnection(this.sql, false);
        createInternalPreparedStatement(realConnection, this.sql);
        try {
            if (!batchParameterReplayers.isEmpty()) {
                for (List<ParameterReplayFunc<PreparedStatement>> batchParameterReplayer : this.batchParameterReplayers) {
                    for (ParameterReplayFunc<PreparedStatement> replayFunc : batchParameterReplayer) {
                        replayFunc.replay(this.innerPreparedStatement);
                    }
                    this.innerPreparedStatement.addBatch();
                }
            }
            return this.innerPreparedStatement.executeBatch();
        } finally {
            this.batchParameterReplayers.clear();
        }
    }
}
