package com.zuomaigai.jdbc.demo;

import com.zuomaigai.jdbc.AbstractConnection;
import com.zuomaigai.jdbc.AbstractStatement;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ReadWriteSplitStatement extends AbstractStatement {

    public ReadWriteSplitStatement(AbstractConnection connection) {
        this.connection = connection;
    }

    public ReadWriteSplitStatement(AbstractConnection connection, int resultSetType, int resultSetConcurrency) {
        this(connection);
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
    }

    public ReadWriteSplitStatement(AbstractConnection connection, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        this(connection);
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
    }

    private void createRealStatement(String sql, boolean explicitUpdate) throws SQLException {
        Connection realConnection = this.connection.getRealConnection(sql, explicitUpdate);
        this.innerStatement = createInternalStatement(realConnection);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        createRealStatement(sql, false);
        this.resultSet = this.innerStatement.executeQuery(sql);
        return this.resultSet;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        createRealStatement(sql, true);
        return this.innerStatement.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        createRealStatement(sql, true);
        return this.innerStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        createRealStatement(sql, true);
        return this.innerStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        createRealStatement(sql, true);
        return this.innerStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        createRealStatement(sql, false);
        boolean result = this.innerStatement.execute(sql);
        this.resultSet = this.innerStatement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        createRealStatement(sql, false);
        boolean result = this.innerStatement.execute(sql, autoGeneratedKeys);
        this.resultSet = this.innerStatement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        createRealStatement(sql, false);
        boolean result = this.innerStatement.execute(sql, columnIndexes);
        this.resultSet = this.innerStatement.getResultSet();
        return result;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        createRealStatement(sql, false);
        boolean result = this.innerStatement.execute(sql, columnNames);
        this.resultSet = this.innerStatement.getResultSet();
        return result;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        try {
            if (this.batchSqls == null || this.batchSqls.isEmpty()) {
                return new int[0];
            }

            createRealStatement(null, true);
            for (String sql : batchSqls) {
                this.innerStatement.addBatch(sql);
            }
            return this.innerStatement.executeBatch();
        } finally {
            if (this.batchSqls != null) {
                this.batchSqls.clear();
            }
        }
    }
}
